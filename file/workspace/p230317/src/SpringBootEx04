230316(SpringBoot structure[application, service, repository], JSP, Redirect), 230317(Redirect[cookie,session], DI, Database Connection) 
 
 [Redirect]
 	- 쿠키 : 사용자의 요청과 응답을 저장한 것
 	- 세션 : 사용자와 서버가 연결된 상태
 	- 접근하면 안되는 url로 들어왔을 때도 redirect를 사용해 정상적인 경로로 보낸다
 	
 [DI] : 의존성 주입(Dependency Injection)
 	- Container가 시작하면서 만드는 Bean(객체)는 어노테이션으로 지정해줘야 한다
 	- Controller의 어노테이션은 @Controller
 	- Service의 어노테이션은 @Service
 	- Repository의 어노테이션은 @Repository
 	- 주입되는 것을 먼저 만들어놓고 주입해주기 때문에 가장 먼저 생성되는 bean(객체)는
 	  Repository다
 	- 의존성 주입은 Container가 자동으로 bean을 주입해줌
 	- 외부에서 주입되는 것을 사용해 기능을 작동하기 때문에 
 	  모듈간의 결합도가 낮아지고 유연성이 높아짐
 
 [Database Connection]
 	- Oracle이나 MySQL은 너무 무겁기 때문에 테스트용으로 적합한 H2 DB사용
 	- DB를 사용할 땐 쿼리 한 번 사용하고 연결을 끊음 
 		- 연결이 유지되면 요청이 늘어날 때 모든 연결이 유지되므로 연결을 끊어줌
 	- JDBC : Java Database Connectivity
 	
 	[JDBC 사용 준비]
 	1. JDBC URL
		jdbc:h2:tcp://localhost/~/test
 	2. build.gradle 파일에 코드 추가
		implementation 'org.springframework.boot:spring-boot-starter-jdbc'
		runtimeOnly 'com.h2database:h2'
 	3. application.properites 파일에 코드 추가
		spring.datasource.url=jdbc:h2:tcp://localhost/~/test
		spring.datasource.driver-class-name=org.h2.Driver
		spring.datasource.username=sa
	
 	[Java JDBC] 
 	- 입출력은 예외가 발생하기 쉽기 때문에 예외처리를 꼭 해줘야 된다
 	- 동적쿼리 - 정해지지 않은 쿼리 -> 변수가 있는 쿼리
 	- 정적쿼리 - 정해진 쿼리
 	- Connection		: DB연결
 	- PreparedStatement : 동적쿼리를 사용할 때 쓰는 클래스
 	- ResultSet			: 쿼리결과를 받기 위한 클래스
 		[EX]
 		conn = getConnection();
		pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); // 첫 번째 컬럼(id)은 자동으로 생성
		pstmt.setString(1, member.getName()); 	// 첫 번째 변수에 값 설정
		pstmt.executeUpdate();				  	// 테이블이 변경되는 쿼리 실행
		rs = pstmt.getGeneratedKeys();		  	// 자동으로 생성되는 키(auto-increment된 id)가 있는 로우를 받아옴
		
	[SpringBoot JDBC]
 	- JdbcTemplate을 생성해 DataSource를 넣어줌
 	