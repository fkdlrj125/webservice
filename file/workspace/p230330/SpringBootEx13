 [URI/URL]
 - URL : 리소스의 위치를 가르키는 문자열 - 방향에 집중
 - URI : 자원을 나타내는 주소 - 자원에 집중
  - URI만으로 실행할 동작을 개발자가 알 수 있어야 함
 - 모든 URL은 URI가 될 수 있지만 모든 URI는 URL이 될 수 없다
 - URI > URL > URN 
 - URL 구조
  https://
  scheme(스킴) - protocol(통신 규약)

  developer.mozilla.org
  domain(도메인)

  /en-US/docs/Web/HTTP/Messages
  path(위치),resource(자원)

  https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages
  통신 프로토콜이 있어야 URL

  developer.mozilla.org/en-US/docs/Web/HTTP/Messages
  통신 프로토콜이 없으면 URI

 [HTTP Message]
 - 서버와 클라이언트 사이에 데이터가 교환되는데 사용되는 정보(파일)
 - 파일은 헤더와 바디로 이루어져 있다
 - 빈 라인으로 헤더와 바디를 구분
  - Header
    - 요청 라인(Request Line) : HTTP Method, 경로(주로 URL형태), 통신프로토콜/버전
    - 요청 헤더(Request Header) : 
      Host(과거)/authority(현재)   : 서버의 도메인 주소
      connection(연결) : 현재는 사라진 헤더
      user-agent()  : 사용자의 웹 브라우저 정보,버전 정보

    - [Accept]
     - Accept : 브라우저가 처리할 수 있는 데이터의 형태
     - Accept-Language 	: 사용하는 언어
     - Accept-Encoding 	: 브라우저가 처리할 수 있는 압축 방식
     - Accept-Charset 	: 브라우저가 처리할 수 있는 문자 인코딩 방법


    - [Referer]
       - 이전 페이지의 주소

    - [Cookie]
       - 세션이 생성되면 클라이언트를 식별하기 위해 서버에서 설정한 정보

    - [Content]
       - Content-Length	: 메세지의 본문 크기를 byte단위로 표시
       - Content-Type 	: 컨텐츠의 타입과 문자열 인코딩 등 명시
       - Content-Language : 사용하는 언어
       - Content-Encoding 	: 컨텐츠 압축 방식

  - Body
    - query parameter 값을 키=값 형식으로 저장
    - GET방식은 query parameter로 통해 값을 보내주기 때문에 
      바디에 값이 저장되진 않는다

 [HTTP Method]
 - POST GET PUT DELETE 4가지 Method를 이용해 CRUD가 가능
  - POST   : 리소스 생성(Create - insert)
    - HTML5에선 Method PUT, DELETE는 제공되지 않기 때문에
      POST는 모든 CRUD를 의미하기도 한다.
  - GET    : 리소스 조회(Read   - select)
  - PUT    : 리소스 수정(Update - update)
  - DELETE : 리소스 삭제(Delete - delete)
 - 

 [REST API]
 - https://meetup.nhncloud.com/posts/92

 [멱등성]
 - 연산을 여러 번해도 결과는 같아야 한다
 - Post는 멱등성을 보장하지 않는다 
  - post를 여러 번 실행하면 db에 계속해서 추가되기 때문에
    결과가 계속해서 변한다.
  - 따라서 post를 여러 번 실행해도 결과가 변하지 않게
    보장해줘야 한다.