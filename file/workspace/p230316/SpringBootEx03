 [SpringBoot 프로젝트 복사]
 	- settings.gradle에 rootProject를 복사한 프로젝트로 변경
  	- settings.gradle 우클릭 Gradle - Refresh Gradle Project
  	
 [Port번호 변경]
 	- resources - application.properties에 server.port=""
 	
 [Post]
	- header와 body로 구성된 패킷이 암호화되어 전송
	- 'key = value' 형태로 저장해서 데이터 전송
	- 기본타입는 x-www-form-urlencoded
			- 인코딩을 해 보안이 좋음
	- 많은 양의 데이터를 전송할 땐 form-data 사용
			- 인코딩하지 않아 전송속도가 빠름

 [JSP]
 	- HTML 파일에 작성 불가
 	- JSP파일에 HTML문법과 JAVA문법을 같이 사용
 	- 확장자가 jsp라 브라우저에서 확인 불가
 	
 [SpringBoot 동작 구조]
 	- 톰켓 내에 Servlet이 가장 먼저 요청(URI)을 처리함
 		1. Handler Mapping으로 처리 가능한 handler를 탐색
 		2. 해당 handler가 있다면 controller에게 위임 
 			- controller에 handler가 있기 때문에 controller가 처리
 			- 기능적 처리가 필요하다면 Service Layer에 접근
 			- 데이터 처리가 필요하다면 Repository Layer에 접근
 			- DB에 직접 접근해서 데이터 처리하는 방식은 좋지 않음
 		3. 처리가 끝난 후 Servlet에게 결과(view와 model) 전달
 		4. Servlet이 viewResolver에게 결과를 전달
 		5. viewResolver가 해당 결과를 html에 적용 후 client에게 전달
 		
 	- Controller 동작 구조
 		1. 기능적 처리가 필요하면 Service Layer에 접근
 		2. 기능적 처리 or 바로 데이터 처리가 필요하다면 Repository Layer 접근
 		3. Repository Layer에서 데이터 베이스에 접근해서 해당 데이터 처리
 		
 		- service에서 처리할 기능이 없다고 해도 service를 통해
 		  repository에 접근하는 것이 좋음
 		
 	[각 계층에서 확인하는 법]
 	- front(view)	- postman
 	- Service layer - test 코드
 	- Repository 	- test 코드
 	
 	- SpringBoot의 도메인은 클래스파일 - 계층에서 데이터를 담기 위한 클래스
 	
 [request, response]
	- 요청이 들어오면 request에 요청을 저장하고 응답을 해주면 response에 응답을 저장한다
 	  request와 response에 요청이 저장돼 있는 상태에서 새로고침을 하면 계속해서
 	  해당 request와 response가 새로운 요청이 오기 전까지 실행된다
 	- 해당 요청이 지속되길 원하는 게 아니라면 사용자가 새로운 연결을 요청하도록 만들어
 	  해당 요청을 끊는다(redirect)
 
  [Repository]
  	- 인터페이스를 만들어 똑같은 메소드를 오버라이딩시켜 다른 파일이 변경되어도 영향을 받지
  	  않게 한다
 