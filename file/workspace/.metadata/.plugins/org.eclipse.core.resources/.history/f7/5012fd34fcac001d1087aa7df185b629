/*
 * 	[다형성]
 * 	 - 부모의 참조변수로 자식 객체를 가리킴 / 자식의 정보를 보지 않음
 * 	 - 오버라이딩된 메소드는 테이블에 저장
 *     오버라이딩된 메소드 실행되면 자식의 오버라이딩된 메소드를 찾아감
 */
class Parent {
	private int money=1_000_000;
	public void spend(int money) {
		this.money -= money;
		System.out.println("남은 돈은 "+this.money+"입니다.");
		System.out.println("=============================================");
	}
	public void working() {
		System.out.println("부모님은 열심히 일하는 중입니다.");
		System.out.println("=============================================");
	}
}

class Son extends Parent{
	public void play() {
		System.out.println("노는 중~~~");
		System.out.println("=============================================");
	}
	
	@Override
	public void spend(int money) {
		System.out.println("<<오버라이딩된 메소드>>");
		System.out.println("용돈 "+money+"원 주세요");
		System.out.println("=============================================");
	}
}

class Daughter extends Parent{
	public void study() {
		System.out.println("공부 중~~~");
		System.out.println("=============================================");
	}
	@Override
	public void spend(int money) {
		System.out.println("[[오버라이딩된 메소드]]");
		System.out.println("학원비 "+money+"원 주세요~");
		System.out.println("=============================================");
	}

}

public class PolymorhismEx01 {
	public static void main(String[] args) {
		
		Parent p = new Parent();
		Parent p2 = new Son();			
//		p2.spend(100);
		Parent p3 = new Daughter();
//		p3.spend(10_000);
		
//		Daughter d = new Parent(); 
		
//		[객체 배열]
		Parent[] p4 = new Parent[]{new Son(),new Daughter()};
//		p4[0] = new Son();
//		p4[1] = new Daughter();
		p4[0].spend(10000);
		p4[1].spend(10000);
		
		Son s = new Son();
//		s.spend(100_000);
	}
}
